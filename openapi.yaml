openapi: 3.0.0
info:
  title: School Timetable Management API with Wellness
  version: 2.0.0
  description: |
    RESTful API for the School Timetable Management SaaS Platform, including automated timetable generation, 
    teacher wellness monitoring, workload management, and substitution handling. Supports multi-tenant schools 
    with role-based access (admin, principal, teacher, student, parent).

servers:
  - url: https://api.schooltimetable.com/v1
    description: Production server
  - url: http://localhost:3000/v1
    description: Development server

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Core Entities
    School:
      type: object
      required: [name]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        address:
          type: string
        settings:
          type: object
        wellnessConfig:
          type: object
        subscriptionTier:
          type: string
          enum: [basic, premium, enterprise]
        createdAt:
          type: string
          format: date-time

    User:
      type: object
      required: [email, role]
      properties:
        id:
          type: string
          format: uuid
        schoolId:
          type: string
          format: uuid
        email:
          type: string
        passwordHash:
          type: string
          writeOnly: true
        role:
          type: string
          enum: [admin, principal, teacher, student, parent]
        profile:
          type: object
        wellnessPreferences:
          type: object
        createdAt:
          type: string
          format: date-time

    Teacher:
      type: object
      required: [userId, subjects]
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        subjects:
          type: array
          items:
            type: string
        availability:
          type: object
        preferences:
          type: object
        maxPeriodsPerDay:
          type: integer
          default: 6
        maxPeriodsPerWeek:
          type: integer
          default: 30
        maxConsecutivePeriods:
          type: integer
          default: 3
        minBreakDuration:
          type: integer
          default: 10
        wellnessScore:
          type: number
        burnoutRiskLevel:
          type: string
          enum: [LOW, MEDIUM, HIGH, CRITICAL]

    TeacherWorkloadConfig:
      type: object
      properties:
        id:
          type: string
          format: uuid
        teacherId:
          type: string
          format: uuid
        maxPeriodsPerDay:
          type: integer
          default: 6
        maxConsecutivePeriods:
          type: integer
          default: 3
        minBreakBetweenClasses:
          type: integer
          default: 10
        maxPeriodsPerWeek:
          type: integer
          default: 30
        preferredFreePeriods:
          type: integer
          default: 2
        maxEarlyMorningClasses:
          type: integer
          default: 3
        maxLateEveningClasses:
          type: integer
          default: 2
        prepTimeRequired:
          type: integer
          default: 60
        correctionTimePerStudent:
          type: number
          default: 0.5
        specialRequirements:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Class:
      type: object
      required: [name, grade]
      properties:
        id:
          type: string
          format: uuid
        schoolId:
          type: string
          format: uuid
        name:
          type: string
        grade:
          type: integer
        section:
          type: string
        stream:
          type: string
          enum: [Science, Commerce, Arts]
        studentCount:
          type: integer

    Subject:
      type: object
      required: [name, credits]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        department:
          type: string
        credits:
          type: integer
        minPeriodsPerWeek:
          type: integer
        maxPeriodsPerWeek:
          type: integer
        prepTime:
          type: integer
        correctionWorkload:
          type: number
        requiresLab:
          type: boolean

    TimeSlot:
      type: object
      required: [day, startTime, endTime]
      properties:
        id:
          type: string
          format: uuid
        day:
          type: string
          enum: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday]
        startTime:
          type: string
          format: time
        endTime:
          type: string
          format: time
        isBreak:
          type: boolean

    Room:
      type: object
      required: [name]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        capacity:
          type: integer
        type:
          type: string
          enum: [classroom, lab, auditorium, office]

    AcademicYear:
      type: object
      required: [schoolId, year]
      properties:
        id:
          type: string
          format: uuid
        schoolId:
          type: string
          format: uuid
        year:
          type: string
          format: year
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date

    Constraint:
      type: object
      required: [type, value]
      properties:
        id:
          type: string
          format: uuid
        schoolId:
          type: string
          format: uuid
        type:
          type: string
          enum: [academic_min_periods, academic_time_preference, wellness_max_consecutive, wellness_daily_hours, etc.]
        entityId:
          type: string
          format: uuid  # e.g., subjectId, teacherId
        value:
          type: object
        priority:
          type: string
          enum: [hard, soft]
        createdAt:
          type: string
          format: date-time

    Timetable:
      type: object
      required: [schoolId, academicYearId]
      properties:
        id:
          type: string
          format: uuid
        schoolId:
          type: string
          format: uuid
        academicYearId:
          type: string
          format: uuid
        version:
          type: integer
        status:
          type: string
          enum: [draft, approved, active, archived]
        wellnessScore:
          type: number
        workloadBalanceScore:
          type: number
        metadata:
          type: object
        wellnessAnalysis:
          type: object
        createdBy:
          type: string
          format: uuid
        approvedBy:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time

    TimetableEntry:
      type: object
      required: [timetableId, classId, subjectId, teacherId, timeSlotId]
      properties:
        id:
          type: string
          format: uuid
        timetableId:
          type: string
          format: uuid
        classId:
          type: string
          format: uuid
        subjectId:
          type: string
          format: uuid
        teacherId:
          type: string
          format: uuid
        timeSlotId:
          type: string
          format: uuid
        roomId:
          type: string
          format: uuid
        isCombined:
          type: boolean
        combinedWith:
          type: object
        workloadImpact:
          type: number
        wellnessImpact:
          type: string
          enum: [POSITIVE, NEUTRAL, NEGATIVE]

    Substitution:
      type: object
      required: [originalEntryId, absentTeacherId, substituteTeacherId, date]
      properties:
        id:
          type: string
          format: uuid
        originalEntryId:
          type: string
          format: uuid
        absentTeacherId:
          type: string
          format: uuid
        substituteTeacherId:
          type: string
          format: uuid
        date:
          type: string
          format: date
        reason:
          type: string
        workloadCheckPassed:
          type: boolean
        workloadOverrideReason:
          type: string
        status:
          type: string
          enum: [pending, approved, rejected]
        createdAt:
          type: string
          format: date-time

    # Wellness Schemas
    TeacherWellnessMetrics:
      type: object
      properties:
        id:
          type: string
          format: uuid
        teacherId:
          type: string
          format: uuid
        metricDate:
          type: string
          format: date
        teachingHours:
          type: number
        prepHours:
          type: number
        correctionHours:
          type: number
        totalWorkHours:
          type: number
        consecutivePeriodsMax:
          type: integer
        gapsTotalMinutes:
          type: integer
        stressScore:
          type: integer
          minimum: 0
          maximum: 100
        wellnessScore:
          type: integer
          minimum: 0
          maximum: 100
        burnoutIndicators:
          type: object
        createdAt:
          type: string
          format: date-time

    WorkloadAlert:
      type: object
      properties:
        id:
          type: string
        teacherId:
          type: string
          format: uuid
        alertType:
          type: string
        severity:
          type: string
          enum: [INFO, WARNING, CRITICAL]
        title:
          type: string
        message:
          type: string
        recommendations:
          type: array
          items:
            type: string
        acknowledged:
          type: boolean
        acknowledgedBy:
          type: string
          format: uuid
        acknowledgedAt:
          type: string
          format: date-time
        resolved:
          type: boolean
        resolvedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time

    WellnessIntervention:
      type: object
      properties:
        id:
          type: string
          format: uuid
        teacherId:
          type: string
          format: uuid
        interventionType:
          type: string
        description:
          type: string
        recommendedActions:
          type: object
        implemented:
          type: boolean
        implementationDate:
          type: string
          format: date
        effectivenessScore:
          type: integer
        notes:
          type: string
        createdBy:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time

    WellnessDashboard:
      type: object
      properties:
        teacherId:
          type: string
        currentWorkload:
          type: object
          properties:
            teachingHours:
              type: number
            prepHours:
              type: number
            correctionHours:
              type: number
            totalHours:
              type: number
        wellnessScore:
          type: integer
        stressScore:
          type: integer
        burnoutRisk:
          type: string
          enum: [LOW, MEDIUM, HIGH, CRITICAL]
        trends:
          type: object
        recommendations:
          type: array
          items:
            type: string
        alerts:
          type: array
          items:
            $ref: '#/components/schemas/WorkloadAlert'

    WorkloadAnalysis:
      type: object
      properties:
        scope:
          type: string
          enum: [teacher, department, school]
        metrics:
          type: object
          properties:
            averageWorkload:
              type: number
            distribution:
              type: object
            stressFactors:
              type: array
              items:
                type: string
            atRiskCount:
              type: integer
        insights:
          type: array
          items:
            type: string
        recommendations:
          type: array
          items:
            type: string

    RedistributionPlan:
      type: object
      properties:
        suggestions:
          type: array
          items:
            type: object
            properties:
              fromTeacher:
                type: string
              toTeacher:
                type: string
              classesAffected:
                type: array
                items:
                  type: string
              impact:
                type: object
                properties:
                  workloadChange:
                    type: number
                  wellnessImprovement:
                    type: number

    BurnoutPrediction:
      type: object
      properties:
        teacherId:
          type: string
        predictionDate:
          type: string
          format: date
        predictionType:
          type: string
          enum: [BURNOUT_RISK, WORKLOAD_TREND]
        predictionValue:
          type: number
        confidenceLevel:
          type: number
        contributingFactors:
          type: object
        recommendedInterventions:
          type: object
        createdAt:
          type: string
          format: date-time

    TimetableWithWellness:
      type: object
      properties:
        timetable:
          $ref: '#/components/schemas/Timetable'
        wellnessAnalysis:
          type: object
          properties:
            overallScore:
              type: number
            teacherScores:
              type: object
            departmentScores:
              type: object
            issues:
              type: array
              items:
                type: object
            improvements:
              type: array
              items:
                type: string

    SubstituteRecommendation:
      type: object
      properties:
        teacherId:
          type: string
        score:
          type: number
        currentWorkload:
          type: number
        availability:
          type: boolean
        subjectMatch:
          type: string
          enum: [perfect, good, basic]
        reasons:
          type: array
          items:
            type: string

    # Import Schemas
    ImportRequest:
      type: object
      properties:
        file:
          type: string
          format: binary
        format:
          type: string
          enum: [csv, xlsx, json]
        entityType:
          type: string
          enum: [teachers, classes, subjects, constraints]

    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        details:
          type: object

  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

paths:
  # Authentication
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, role, schoolId]
              properties:
                email:
                  type: string
                password:
                  type: string
                  writeOnly: true
                role:
                  type: string
                  enum: [admin, principal, teacher, student, parent]
                schoolId:
                  type: string
                  format: uuid
                profile:
                  type: object
      responses:
        201:
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/BadRequest'

  /auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthorized'

  # Schools
  /schools:
    get:
      summary: List schools (for multi-tenant)
      responses:
        200:
          description: List of schools
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/School'
    post:
      summary: Create a new school
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/School'
      responses:
        201:
          description: School created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/School'

  /schools/{schoolId}:
    get:
      summary: Get school details
      parameters:
        - name: schoolId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: School details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/School'
        404:
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update school
      parameters:
        - name: schoolId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/School'
      responses:
        200:
          description: School updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/School'
    delete:
      summary: Delete school
      parameters:
        - name: schoolId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: School deleted

  # Users
  /users:
    get:
      summary: List users in school
      parameters:
        - name: schoolId
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{userId}:
    get:
      summary: Get user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: User updated
    delete:
      summary: Delete user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: User deleted

  # Teachers (extended users)
  /teachers:
    get:
      summary: List teachers
      parameters:
        - name: schoolId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: List of teachers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Teacher'
    post:
      summary: Create teacher
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        201:
          description: Teacher created

  /teachers/{teacherId}:
    get:
      summary: Get teacher
      parameters:
        - name: teacherId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Teacher details
    put:
      summary: Update teacher
      parameters:
        - name: teacherId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        200:
          description: Teacher updated

  /teachers/{teacherId}/workload-config:
    get:
      summary: Get teacher workload config
      parameters:
        - name: teacherId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Workload config
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherWorkloadConfig'
    put:
      summary: Update workload config
      parameters:
        - name: teacherId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeacherWorkloadConfig'
      responses:
        200:
          description: Config updated

  # Classes, Subjects, etc. (similar CRUD)
  /classes:
    get:
      summary: List classes
      parameters:
        - name: schoolId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: List of classes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Class'
    post:
      summary: Create class
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Class'
      responses:
        201:
          description: Class created

  /classes/{classId}:
    get:
      summary: Get class
      parameters:
        - name: classId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Class details
    put:
      summary: Update class
      parameters:
        - name: classId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Class'
      responses:
        200:
          description: Class updated

  /subjects:
    get:
      summary: List subjects
      parameters:
        - name: schoolId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: List of subjects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subject'
    post:
      summary: Create subject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subject'
      responses:
        201:
          description: Subject created

  /subjects/{subjectId}:
    get:
      summary: Get subject
      parameters:
        - name: subjectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Subject details
    put:
      summary: Update subject
      parameters:
        - name: subjectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subject'
      responses:
        200:
          description: Subject updated

  /time-slots:
    get:
      summary: List time slots
      parameters:
        - name: schoolId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: List of time slots
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimeSlot'
    post:
      summary: Create time slot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeSlot'
      responses:
        201:
          description: Time slot created

  /rooms:
    get:
      summary: List rooms
      parameters:
        - name: schoolId
          in: query
          schema:
            type: string
          format: uuid
      responses:
        200:
          description: List of rooms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
    post:
      summary: Create room
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
      responses:
        201:
          description: Room created

  /academic-years:
    get:
      summary: List academic years
      parameters:
        - name: schoolId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: List of academic years
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AcademicYear'
    post:
      summary: Create academic year
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcademicYear'
      responses:
        201:
          description: Academic year created

  # Data Import
  /import:
    post:
      summary: Import data (teachers, classes, etc.)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImportRequest'
      responses:
        200:
          description: Import results
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  imported:
                    type: integer
                  errors:
                    type: array
                    items:
                      type: string

  # Constraints
  /constraints:
    get:
      summary: List constraints
      parameters:
        - name: schoolId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: type
          in: query
          schema:
            type: string
            enum: [academic, wellness]
      responses:
        200:
          description: List of constraints
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Constraint'
    post:
      summary: Create constraint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Constraint'
      responses:
        201:
          description: Constraint created

  /constraints/{constraintId}:
    get:
      summary: Get constraint
      parameters:
        - name: constraintId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Constraint details
    put:
      summary: Update constraint
      parameters:
        - name: constraintId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Constraint'
      responses:
        200:
          description: Constraint updated
    delete:
      summary: Delete constraint
      parameters:
        - name: constraintId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Constraint deleted

  # Timetables
  /timetables:
    get:
      summary: List timetables
      parameters:
        - name: schoolId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: academicYearId
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, approved, active, archived]
      responses:
        200:
          description: List of timetables
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Timetable'
    post:
      summary: Create empty timetable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [schoolId, academicYearId]
              properties:
                schoolId:
                  type: string
                  format: uuid
                academicYearId:
                  type: string
                  format: uuid
      responses:
        201:
          description: Timetable created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timetable'

  /timetables/{id}:
    get:
      summary: Get timetable
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Timetable details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timetable'
    put:
      summary: Update timetable (manual edits)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Timetable'
      responses:
        200:
          description: Timetable updated
    delete:
      summary: Delete timetable
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Timetable deleted

  /timetables/{id}/entries:
    get:
      summary: List timetable entries
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: List of entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimetableEntry'
    post:
      summary: Add entry
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimetableEntry'
      responses:
        201:
          description: Entry added

  /timetables/{id}/generate:
    post:
      summary: Generate timetable with wellness optimization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                options:
                  type: integer
                  default: 3
                timeout:
                  type: integer
                  default: 60
                optimization:
                  type: object
                  properties:
                    academicWeight:
                      type: number
                      default: 0.35
                    wellnessWeight:
                      type: number
                      default: 0.30
                    efficiencyWeight:
                      type: number
                      default: 0.20
                    preferenceWeight:
                      type: number
                      default: 0.15
      responses:
        200:
          description: Generated timetable options with wellness scores
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimetableWithWellness'

  /timetables/{id}/approve:
    post:
      summary: Approve timetable
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Timetable approved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timetable'

  # Substitutions
  /substitutions:
    get:
      summary: List substitutions
      parameters:
        - name: date
          in: query
          schema:
            type: string
            format: date
        - name: teacherId
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, approved, rejected]
      responses:
        200:
          description: List of substitutions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Substitution'
    post:
      summary: Create substitution
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Substitution'
      responses:
        201:
          description: Substitution created

  /substitutions/{subId}:
    get:
      summary: Get substitution
      parameters:
        - name: subId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Substitution details
    put:
      summary: Update substitution (e.g., approve)
      parameters:
        - name: subId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Substitution'
      responses:
        200:
          description: Substitution updated

  /substitutions/recommend:
    post:
      summary: Get substitute recommendations with workload consideration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                teacherId:
                  type: string
                date:
                  type: string
                  format: date
                periods:
                  type: array
                  items:
                    type: integer
                considerWorkload:
                  type: boolean
                  default: true
      responses:
        200:
          description: Substitute recommendations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubstituteRecommendation'

  # Wellness Endpoints (from PRD partial)
  /wellness/dashboard/{teacherId}:
    get:
      summary: Get teacher wellness dashboard data
      parameters:
        - name: teacherId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: period
          in: query
          schema:
            type: string
            enum: [day, week, month, term]
      responses:
        200:
          description: Wellness dashboard data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WellnessDashboard'

  /wellness/alerts:
    get:
      summary: Get wellness alerts
      parameters:
        - name: severity
          in: query
          schema:
            type: string
            enum: [INFO, WARNING, CRITICAL]
        - name: resolved
          in: query
          schema:
            type: boolean
        - name: teacherId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: List of wellness alerts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkloadAlert'
    post:
      summary: Acknowledge wellness alert
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                alertId:
                  type: string
                action:
                  type: string
                  enum: [acknowledge, resolve, escalate]
                notes:
                  type: string
      responses:
        200:
          description: Alert acknowledged
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadAlert'

  /wellness/workload/analysis:
    get:
      summary: Get workload analysis for department or school
      parameters:
        - name: scope
          in: query
          required: true
          schema:
            type: string
            enum: [teacher, department, school]
        - name: id
          in: query
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Workload analysis
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadAnalysis'

  /wellness/redistribute:
    post:
      summary: Get workload redistribution suggestions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                teacherId:
                  type: string
                targetWorkload:
                  type: number
                constraints:
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: Redistribution suggestions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedistributionPlan'

  /wellness/predictions:
    get:
      summary: Get burnout risk predictions
      parameters:
        - name: timeframe
          in: query
          schema:
            type: string
            enum: [week, month, term]
        - name: teacherId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Burnout predictions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BurnoutPrediction'

  /wellness/metrics:
    get:
      summary: Get teacher wellness metrics
      parameters:
        - name: teacherId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: fromDate
          in: query
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          schema:
            type: string
            format: date
      responses:
        200:
          description: Wellness metrics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeacherWellnessMetrics'
    post:
      summary: Record new metric
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeacherWellnessMetrics'
      responses:
        201:
          description: Metric recorded

  /wellness/interventions:
    get:
      summary: List interventions
      parameters:
        - name: teacherId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: List of interventions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WellnessIntervention'
    post:
      summary: Create intervention
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WellnessIntervention'
      responses:
        201:
          description: Intervention created

  # Analytics and Reports
  /analytics/workload:
    get:
      summary: Get workload reports
      parameters:
        - name: schoolId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: period
          in: query
          schema:
            type: string
            enum: [week, month, term, year]
      responses:
        200:
          description: Workload analytics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadAnalysis'

  /analytics/compliance:
    get:
      summary: Get compliance reports
      parameters:
        - name: schoolId
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Compliance data
          content:
            application/json:
              schema:
                type: object
                properties:
                  violations:
                    type: array
                    items:
                      type: object
                  complianceScore:
                    type: number

  # Notifications (basic)
  /notifications:
    get:
      summary: Get user notifications
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: unread
          in: query
          schema:
            type: boolean
      responses:
        200:
          description: List of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    type:
                      type: string
                    message:
                      type: string
                    severity:
                      type: string
                      enum: [INFO, WARNING, CRITICAL]
                    read:
                      type: boolean
                    createdAt:
                      type: string
                      format: date-time
    post:
      summary: Mark notification as read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                notificationId:
                  type: string
      responses:
        200:
          description: Notification marked read

  # Exports
  /export/timetable/{id}:
    get:
      summary: Export timetable
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: format
          in: query
          schema:
            type: string
            enum: [pdf, csv, json, ical]
      responses:
        200:
          description: Exported file
          content:
            application/pdf:
              schema:
                type: string
                format: binary
            # Similar for other formats

  /export/wellness-report:
    get:
      summary: Export wellness report
      parameters:
        - name: teacherId
          in: query
          schema:
            type: string
            format: uuid
        - name: period
          in: query
          schema:
            type: string
            enum: [week, month, term]
        - name: format
          in: query
          schema:
            type: string
            enum: [pdf, csv]
      responses:
        200:
          description: Wellness report
          content:
            application/pdf:
              schema:
                type: string
                format: binary