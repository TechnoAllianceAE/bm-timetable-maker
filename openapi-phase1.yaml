openapi: 3.0.0
info:
  title: School Timetable Management API - Phase 1
  version: 1.0.0
  description: |
    RESTful API for School Timetable Management Platform focusing on core timetable generation
    and management functionality. Phase 1 excludes wellness monitoring to focus on getting
    reliable timetable generation working first.

servers:
  - url: http://localhost:3000/api/v1
    description: Development server
  - url: https://api.schooltimetable.com/api/v1
    description: Production server

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Core Entities
    School:
      type: object
      required: [name]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        address:
          type: string
        settings:
          type: object
          description: School-specific configuration
        subscriptionTier:
          type: string
          enum: [basic, premium, enterprise]
        createdAt:
          type: string
          format: date-time

    User:
      type: object
      required: [email, role, schoolId]
      properties:
        id:
          type: string
          format: uuid
        schoolId:
          type: string
          format: uuid
        email:
          type: string
          format: email
        role:
          type: string
          enum: [ADMIN, PRINCIPAL, TEACHER, STUDENT, PARENT]
        profile:
          type: object
          properties:
            firstName:
              type: string
            lastName:
              type: string
            phone:
              type: string
        createdAt:
          type: string
          format: date-time

    Teacher:
      type: object
      required: [userId, subjects]
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        subjects:
          type: array
          items:
            type: string
          description: List of subjects the teacher can teach
        availability:
          type: object
          description: Time slots when teacher is available
        maxPeriodsPerDay:
          type: integer
          default: 6
        maxPeriodsPerWeek:
          type: integer
          default: 30
        maxConsecutivePeriods:
          type: integer
          default: 3

    Class:
      type: object
      required: [name, grade, section]
      properties:
        id:
          type: string
          format: uuid
        schoolId:
          type: string
          format: uuid
        name:
          type: string
          example: "10-A"
        grade:
          type: integer
          minimum: 1
          maximum: 12
        section:
          type: string
          example: "A"
        stream:
          type: string
          enum: [SCIENCE, COMMERCE, ARTS]
          description: For grades 11-12
        studentCount:
          type: integer

    Subject:
      type: object
      required: [name, code, periodsPerWeek]
      properties:
        id:
          type: string
          format: uuid
        schoolId:
          type: string
          format: uuid
        name:
          type: string
          example: "Mathematics"
        code:
          type: string
          example: "MATH"
        periodsPerWeek:
          type: integer
          minimum: 1
          maximum: 10
        requiresLab:
          type: boolean
          default: false
        isElective:
          type: boolean
          default: false

    Room:
      type: object
      required: [name, capacity, type]
      properties:
        id:
          type: string
          format: uuid
        schoolId:
          type: string
          format: uuid
        name:
          type: string
          example: "Room 101"
        building:
          type: string
        floor:
          type: integer
        capacity:
          type: integer
        type:
          type: string
          enum: [CLASSROOM, LAB, SPORTS, LIBRARY, AUDITORIUM]
        facilities:
          type: array
          items:
            type: string
          description: Available facilities (projector, whiteboard, etc.)

    TimeSlot:
      type: object
      required: [dayOfWeek, startTime, endTime, periodNumber]
      properties:
        id:
          type: string
          format: uuid
        schoolId:
          type: string
          format: uuid
        dayOfWeek:
          type: string
          enum: [MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY]
        periodNumber:
          type: integer
          minimum: 1
          maximum: 12
        startTime:
          type: string
          format: time
          example: "09:00"
        endTime:
          type: string
          format: time
          example: "09:45"
        isBreak:
          type: boolean
          default: false

    Constraint:
      type: object
      required: [type, priority, description]
      properties:
        id:
          type: string
          format: uuid
        schoolId:
          type: string
          format: uuid
        type:
          type: string
          enum: [
            TEACHER_AVAILABILITY,
            ROOM_CAPACITY,
            CONSECUTIVE_PERIODS,
            MIN_PERIODS_PER_WEEK,
            MAX_PERIODS_PER_WEEK,
            PREFERRED_TIME_SLOT,
            NO_GAPS,
            LUNCH_BREAK
          ]
        priority:
          type: string
          enum: [MANDATORY, HIGH, MEDIUM, LOW]
        entityType:
          type: string
          enum: [TEACHER, CLASS, SUBJECT, ROOM]
        entityId:
          type: string
          format: uuid
        parameters:
          type: object
          description: Constraint-specific parameters
        description:
          type: string

    Timetable:
      type: object
      required: [academicYearId, status]
      properties:
        id:
          type: string
          format: uuid
        schoolId:
          type: string
          format: uuid
        academicYearId:
          type: string
          format: uuid
        name:
          type: string
        status:
          type: string
          enum: [DRAFT, ACTIVE, ARCHIVED]
        validFrom:
          type: string
          format: date
        validTo:
          type: string
          format: date
        metadata:
          type: object
          properties:
            generatedAt:
              type: string
              format: date-time
            approvedAt:
              type: string
              format: date-time
            approvedBy:
              type: string
            generationScore:
              type: number
              description: Quality score of the generated timetable

    TimetableEntry:
      type: object
      required: [timetableId, classId, subjectId, teacherId, roomId, timeSlotId]
      properties:
        id:
          type: string
          format: uuid
        timetableId:
          type: string
          format: uuid
        classId:
          type: string
          format: uuid
        subjectId:
          type: string
          format: uuid
        teacherId:
          type: string
          format: uuid
        roomId:
          type: string
          format: uuid
        timeSlotId:
          type: string
          format: uuid
        isFixed:
          type: boolean
          default: false
          description: Whether this entry can be modified

    GenerateTimetableRequest:
      type: object
      required: [academicYearId, constraints]
      properties:
        academicYearId:
          type: string
          format: uuid
        constraints:
          type: array
          items:
            $ref: '#/components/schemas/Constraint'
        preferences:
          type: object
          properties:
            minimizeGaps:
              type: boolean
              default: true
            optimizeRoomUsage:
              type: boolean
              default: true
            balanceTeacherLoad:
              type: boolean
              default: true
        weights:
          type: object
          properties:
            academicRequirements:
              type: number
              default: 0.4
            resourceUtilization:
              type: number
              default: 0.25
            gapMinimization:
              type: number
              default: 0.2
            teacherPreferences:
              type: number
              default: 0.15

    GenerateTimetableResponse:
      type: object
      properties:
        solutions:
          type: array
          items:
            type: object
            properties:
              timetable:
                $ref: '#/components/schemas/Timetable'
              entries:
                type: array
                items:
                  $ref: '#/components/schemas/TimetableEntry'
              score:
                type: number
              metrics:
                type: object
                properties:
                  constraintsSatisfied:
                    type: integer
                  totalConstraints:
                    type: integer
                  roomUtilization:
                    type: number
                  gapCount:
                    type: integer
              conflicts:
                type: array
                items:
                  type: string
              suggestions:
                type: array
                items:
                  type: string

    ValidationResult:
      type: object
      properties:
        isValid:
          type: boolean
        conflicts:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              description:
                type: string
              entities:
                type: array
                items:
                  type: string
        warnings:
          type: array
          items:
            type: string

paths:
  # Authentication
  /auth/register:
    post:
      summary: Register a new user
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, role, schoolId]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
                role:
                  type: string
                  enum: [ADMIN, PRINCIPAL, TEACHER, STUDENT, PARENT]
                schoolId:
                  type: string
                  format: uuid
                profile:
                  type: object
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        400:
          description: Invalid request data
        409:
          description: User already exists

  /auth/login:
    post:
      summary: Login user
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        401:
          description: Invalid credentials

  # User Management
  /users:
    get:
      summary: List users in school
      tags: [Users]
      parameters:
        - name: schoolId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: role
          in: query
          schema:
            type: string
            enum: [ADMIN, PRINCIPAL, TEACHER, STUDENT, PARENT]
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    post:
      summary: Create a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{userId}:
    get:
      summary: Get user details
      tags: [Users]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found

    put:
      summary: Update user
      tags: [Users]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    delete:
      summary: Delete user
      tags: [Users]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: User deleted

  # Teachers
  /teachers:
    get:
      summary: List teachers
      tags: [Teachers]
      parameters:
        - name: schoolId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: subject
          in: query
          schema:
            type: string
      responses:
        200:
          description: List of teachers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Teacher'

    post:
      summary: Create teacher profile
      tags: [Teachers]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        201:
          description: Teacher created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'

  /teachers/{teacherId}:
    get:
      summary: Get teacher details
      tags: [Teachers]
      parameters:
        - name: teacherId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Teacher details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'

    put:
      summary: Update teacher profile
      tags: [Teachers]
      parameters:
        - name: teacherId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        200:
          description: Teacher updated

  # Classes
  /classes:
    get:
      summary: List classes
      tags: [Classes]
      parameters:
        - name: schoolId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: grade
          in: query
          schema:
            type: integer
      responses:
        200:
          description: List of classes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Class'

    post:
      summary: Create class
      tags: [Classes]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Class'
      responses:
        201:
          description: Class created

  # Subjects
  /subjects:
    get:
      summary: List subjects
      tags: [Subjects]
      parameters:
        - name: schoolId
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: List of subjects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subject'

    post:
      summary: Create subject
      tags: [Subjects]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subject'
      responses:
        201:
          description: Subject created

  # Rooms
  /rooms:
    get:
      summary: List rooms
      tags: [Rooms]
      parameters:
        - name: schoolId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: type
          in: query
          schema:
            type: string
            enum: [CLASSROOM, LAB, SPORTS, LIBRARY, AUDITORIUM]
      responses:
        200:
          description: List of rooms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'

    post:
      summary: Create room
      tags: [Rooms]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
      responses:
        201:
          description: Room created

  # Time Slots
  /time-slots:
    get:
      summary: List time slots
      tags: [TimeSlots]
      parameters:
        - name: schoolId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: dayOfWeek
          in: query
          schema:
            type: string
            enum: [MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY]
      responses:
        200:
          description: List of time slots
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimeSlot'

    post:
      summary: Create time slot
      tags: [TimeSlots]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeSlot'
      responses:
        201:
          description: Time slot created

  # Constraints
  /constraints:
    get:
      summary: List constraints
      tags: [Constraints]
      parameters:
        - name: schoolId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: type
          in: query
          schema:
            type: string
        - name: entityType
          in: query
          schema:
            type: string
        - name: entityId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: List of constraints
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Constraint'

    post:
      summary: Create constraint
      tags: [Constraints]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Constraint'
      responses:
        201:
          description: Constraint created

  /constraints/{constraintId}:
    put:
      summary: Update constraint
      tags: [Constraints]
      parameters:
        - name: constraintId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Constraint'
      responses:
        200:
          description: Constraint updated

    delete:
      summary: Delete constraint
      tags: [Constraints]
      parameters:
        - name: constraintId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Constraint deleted

  # Timetables - Core functionality
  /timetables:
    get:
      summary: List timetables
      tags: [Timetables]
      parameters:
        - name: schoolId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            type: string
            enum: [DRAFT, ACTIVE, ARCHIVED]
        - name: academicYearId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: List of timetables
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Timetable'

    post:
      summary: Create empty timetable
      tags: [Timetables]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Timetable'
      responses:
        201:
          description: Timetable created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timetable'

  /timetables/{timetableId}:
    get:
      summary: Get timetable details
      tags: [Timetables]
      parameters:
        - name: timetableId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Timetable details
          content:
            application/json:
              schema:
                type: object
                properties:
                  timetable:
                    $ref: '#/components/schemas/Timetable'
                  entries:
                    type: array
                    items:
                      $ref: '#/components/schemas/TimetableEntry'

    put:
      summary: Update timetable metadata
      tags: [Timetables]
      parameters:
        - name: timetableId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Timetable'
      responses:
        200:
          description: Timetable updated

    delete:
      summary: Delete timetable
      tags: [Timetables]
      parameters:
        - name: timetableId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Timetable deleted

  /timetables/{timetableId}/entries:
    get:
      summary: Get timetable entries
      tags: [Timetables]
      parameters:
        - name: timetableId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: classId
          in: query
          schema:
            type: string
            format: uuid
        - name: teacherId
          in: query
          schema:
            type: string
            format: uuid
        - name: dayOfWeek
          in: query
          schema:
            type: string
      responses:
        200:
          description: Timetable entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimetableEntry'

    post:
      summary: Add entry to timetable
      tags: [Timetables]
      parameters:
        - name: timetableId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimetableEntry'
      responses:
        201:
          description: Entry added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimetableEntry'

  /timetables/{timetableId}/entries/{entryId}:
    put:
      summary: Update timetable entry
      tags: [Timetables]
      parameters:
        - name: timetableId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: entryId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimetableEntry'
      responses:
        200:
          description: Entry updated

    delete:
      summary: Remove entry from timetable
      tags: [Timetables]
      parameters:
        - name: timetableId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: entryId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Entry removed

  /timetables/{timetableId}/generate:
    post:
      summary: Generate timetable using AI engine
      tags: [Timetables]
      description: |
        Calls the Python timetable generation service to create optimal timetable solutions
        based on defined constraints. Returns 3-5 ranked solutions.
      parameters:
        - name: timetableId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateTimetableRequest'
      responses:
        200:
          description: Timetable solutions generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateTimetableResponse'
        400:
          description: Invalid constraints or infeasible problem
        500:
          description: Generation failed

  /timetables/{timetableId}/validate:
    post:
      summary: Validate timetable against constraints
      tags: [Timetables]
      parameters:
        - name: timetableId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Validation results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResult'

  /timetables/{timetableId}/activate:
    post:
      summary: Activate timetable for use
      tags: [Timetables]
      parameters:
        - name: timetableId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Timetable activated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timetable'

  /timetables/{timetableId}/duplicate:
    post:
      summary: Create a copy of existing timetable
      tags: [Timetables]
      parameters:
        - name: timetableId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                academicYearId:
                  type: string
                  format: uuid
      responses:
        201:
          description: Timetable duplicated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timetable'

  # Import/Export
  /import/data:
    post:
      summary: Import school data from CSV/Excel
      tags: [Import/Export]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                dataType:
                  type: string
                  enum: [TEACHERS, STUDENTS, CLASSES, SUBJECTS, ROOMS]
      responses:
        200:
          description: Data imported successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  imported:
                    type: integer
                  failed:
                    type: integer
                  errors:
                    type: array
                    items:
                      type: string

  /export/timetable/{timetableId}:
    get:
      summary: Export timetable in various formats
      tags: [Import/Export]
      parameters:
        - name: timetableId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: format
          in: query
          required: true
          schema:
            type: string
            enum: [PDF, EXCEL, CSV, JSON]
      responses:
        200:
          description: Timetable exported
          content:
            application/pdf: {}
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet: {}
            text/csv: {}
            application/json: {}

tags:
  - name: Authentication
    description: User authentication and registration
  - name: Users
    description: User management operations
  - name: Teachers
    description: Teacher profile management
  - name: Classes
    description: Class management
  - name: Subjects
    description: Subject management
  - name: Rooms
    description: Room/facility management
  - name: TimeSlots
    description: Time slot configuration
  - name: Constraints
    description: Constraint management
  - name: Timetables
    description: Core timetable operations
  - name: Import/Export
    description: Data import and export operations