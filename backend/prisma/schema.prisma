// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model School {
  id              String   @id @default(cuid())
  name            String
  address         String?
  contactEmail    String?
  contactPhone    String?
  principalName   String?
  totalStudents   Int?
  academicYearStart DateTime?
  academicYearEnd   DateTime?
  settings        String?
  wellnessConfig  String?
  subscriptionTier String? // e.g., basic, premium, enterprise
  createdAt       DateTime @default(now())

  // Relations
  users           User[]
  academicYears   AcademicYear[]
  timetables      Timetable[]
  classes         Class[]
  subjects        Subject[]
  timeSlots       TimeSlot[]
  rooms           Room[]
  constraints     Constraint[]
  departmentWellnessSummaries DepartmentWellnessSummary[]

  @@map("schools")
}

model User {
  id                String   @id @default(cuid())
  schoolId          String
  email             String   @unique
  passwordHash      String?
  role              String
  profile           String?
  wellnessPreferences String?
  createdAt         DateTime @default(now())

  school            School    @relation(fields: [schoolId], references: [id])
  teacher           Teacher?
  workloadAlerts    WorkloadAlert[]
  wellnessInterventions WellnessIntervention[] @relation("CreatedByUser")
  timetablesCreated Timetable[] @relation("CreatedBy")
  timetablesApproved Timetable[] @relation("ApprovedBy")

  @@map("users")
}

model AcademicYear {
  id        String    @id @default(cuid())
  schoolId  String
  year      String    // e.g., "2024-2025"
  startDate DateTime?
  endDate   DateTime?

  school    School    @relation(fields: [schoolId], references: [id])
  timetables Timetable[]

  @@unique([schoolId, year])
  @@map("academic_years")
}

model Class {
  id          String           @id @default(cuid())
  schoolId    String
  name        String
  grade       Int
  section     String?          // e.g., A, B, C
  stream      String?          // For grades 11-12
  studentCount Int?

  school      School           @relation(fields: [schoolId], references: [id])
  timetableEntries TimetableEntry[]

  @@map("classes")
}

model Subject {
  id              String   @id @default(cuid())
  schoolId        String
  name            String
  department      String?
  credits         Int
  minPeriodsPerWeek Int?
  maxPeriodsPerWeek Int?
  minPeriodsPerYear Int?   // Curriculum requirement - minimum periods per year
  recommendedPeriodsPerYear Int? // Recommended periods per year
  prepTime        Int?     // minutes
  correctionWorkload Float? // time per student
  requiresLab     Boolean  @default(false)

  school          School   @relation(fields: [schoolId], references: [id])
  timetableEntries TimetableEntry[]

  @@map("subjects")
}

model TimeSlot {
  id        String   @id @default(cuid())
  schoolId  String
  day       String
  startTime String   // e.g., "09:00"
  endTime   String   // e.g., "10:00"
  isBreak   Boolean  @default(false)

  school    School   @relation(fields: [schoolId], references: [id])
  timetableEntries TimetableEntry[]

  @@map("time_slots")
}

model Room {
  id       String   @id @default(cuid())
  schoolId String
  name     String
  capacity Int?
  type     String?

  school   School   @relation(fields: [schoolId], references: [id])
  timetableEntries TimetableEntry[]

  @@map("rooms")
}

model Teacher {
  id                    String                @id @default(cuid())
  userId                String                @unique
  subjects              String                  // array of subject IDs or names
  availability          String?
  preferences           String?
  maxPeriodsPerDay      Int                   @default(6)
  maxPeriodsPerWeek     Int                   @default(30)
  maxConsecutivePeriods Int                   @default(3)
  minBreakDuration      Int                   @default(10)
  wellnessScore         Float?
  burnoutRiskLevel      String?

  user                  User                  @relation(fields: [userId], references: [id])
  workloadConfig        TeacherWorkloadConfig?
  wellnessMetrics       TeacherWellnessMetric[]
  workloadAlerts        WorkloadAlert[]
  wellnessInterventions WellnessIntervention[]
  wellnessPredictions   WellnessPrediction[]
  timetableEntries      TimetableEntry[]
  substitutionsAbsent   Substitution[]        @relation("AbsentTeacher")
  substitutionsSub      Substitution[]        @relation("SubstituteTeacher")

  @@map("teachers")
}

model TeacherWorkloadConfig {
  id                      String   @id @default(cuid())
  teacherId               String   @unique
  maxPeriodsPerDay        Int      @default(6)
  maxConsecutivePeriods   Int      @default(3)
  minBreakBetweenClasses  Int      @default(10)
  maxPeriodsPerWeek       Int      @default(30)
  preferredFreePeriods    Int      @default(2)
  maxEarlyMorningClasses  Int      @default(3)
  maxLateEveningClasses   Int      @default(2)
  prepTimeRequired        Int      @default(60)
  correctionTimePerStudent Float    @default(0.5)
  specialRequirements     String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  teacher Teacher @relation(fields: [teacherId], references: [id])

  @@map("teacher_workload_config")
  @@index([teacherId])
}

model TeacherWellnessMetric {
  id                  String   @id @default(cuid())
  teacherId           String
  metricDate          DateTime
  teachingHours       Float?
  prepHours           Float?
  correctionHours     Float?
  totalWorkHours      Float?
  consecutivePeriodsMax Int?
  gapsTotalMinutes    Int?
  stressScore         Int?     // 0-100
  wellnessScore       Int?     // 0-100
  burnoutIndicators   String?
  createdAt           DateTime @default(now())

  teacher Teacher @relation(fields: [teacherId], references: [id])

  @@unique([teacherId, metricDate])
  @@index([teacherId, metricDate(sort: Desc)])
  @@map("teacher_wellness_metrics")
}

model WorkloadAlert {
  id               String   @id @default(cuid())
  teacherId        String
  alertType        String
  severity         String
  title            String
  message          String
  recommendations  String?
  acknowledged     Boolean  @default(false)
  acknowledgedBy   String?
  acknowledgedAt   DateTime?
  resolved         Boolean  @default(false)
  resolvedAt       DateTime?
  createdAt        DateTime @default(now())

  teacher          Teacher  @relation(fields: [teacherId], references: [id])
  acknowledgedUser User?    @relation(fields: [acknowledgedBy], references: [id])

  @@index([teacherId, resolved, severity])
  @@index([teacherId, resolved, createdAt(sort: Desc)])
  @@map("workload_alerts")
}

model WellnessIntervention {
  id                  String   @id @default(cuid())
  teacherId           String
  interventionType    String
  description         String
  recommendedActions  String?
  implemented         Boolean  @default(false)
  implementationDate  DateTime?
  effectivenessScore  Int?
  notes               String?
  createdBy           String
  createdAt           DateTime @default(now())

  teacher     Teacher @relation(fields: [teacherId], references: [id])
  createdUser User    @relation("CreatedByUser", fields: [createdBy], references: [id])

  @@map("wellness_interventions")
}

model Timetable {
  id                  String             @id @default(cuid())
  schoolId            String
  academicYearId      String
  version             Int                @default(1)
  status              String
  wellnessScore       Float?
  workloadBalanceScore Float?
  metadata            String?
  wellnessAnalysis    String?
  createdBy           String?
  approvedBy          String?
  createdAt           DateTime           @default(now())

  school         School    @relation(fields: [schoolId], references: [id])
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  entries        TimetableEntry[]
  createdUser    User?     @relation("CreatedBy", fields: [createdBy], references: [id])
  approvedUser   User?     @relation("ApprovedBy", fields: [approvedBy], references: [id])

  @@map("timetables")
}

model TimetableEntry {
  id            String   @id @default(cuid())
  timetableId   String
  classId       String
  subjectId     String
  teacherId     String
  timeSlotId    String
  roomId        String?
  isCombined    Boolean  @default(false)
  combinedWith  String?
  workloadImpact Float?
  wellnessImpact String?

  timetable     Timetable  @relation(fields: [timetableId], references: [id])
  class         Class      @relation(fields: [classId], references: [id])
  subject       Subject    @relation(fields: [subjectId], references: [id])
  teacher       Teacher    @relation(fields: [teacherId], references: [id])
  timeSlot      TimeSlot   @relation(fields: [timeSlotId], references: [id])
  room          Room?      @relation(fields: [roomId], references: [id])
  substitutions Substitution[] @relation("OriginalEntry")

  @@map("timetable_entries")
}

model Substitution {
  id                    String    @id @default(cuid())
  originalEntryId       String
  absentTeacherId       String
  substituteTeacherId   String
  date                  DateTime
  reason                String?
  workloadCheckPassed   Boolean?
  workloadOverrideReason String?
  status                String @default("PENDING")
  createdAt             DateTime  @default(now())

  originalEntry         TimetableEntry     @relation("OriginalEntry", fields: [originalEntryId], references: [id])
  absentTeacher         Teacher           @relation("AbsentTeacher", fields: [absentTeacherId], references: [id])
  substituteTeacher     Teacher           @relation("SubstituteTeacher", fields: [substituteTeacherId], references: [id])

  @@map("substitutions")
}

model Constraint {
  id        String   @id @default(cuid())
  schoolId  String
  type      String
  entityId  String   // e.g., subjectId, teacherId
  value     String
  priority  String @default("SOFT")
  createdAt DateTime @default(now())

  school School @relation(fields: [schoolId], references: [id])

  @@map("constraints")
}

model DepartmentWellnessSummary {
  id              String   @id @default(cuid())
  schoolId        String
  department      String
  summaryDate     DateTime
  avgWorkloadHours Float?
  avgStressScore  Float?
  teachersAtRisk  Int?
  topStressFactors String?
  recommendations String?
  createdAt       DateTime @default(now())

  school School @relation(fields: [schoolId], references: [id])

  @@map("department_wellness_summary")
}

model WellnessPrediction {
  id                String   @id @default(cuid())
  teacherId         String
  predictionDate    DateTime
  predictionType    String
  predictionValue   Float
  confidenceLevel   Float?
  contributingFactors String?
  recommendedInterventions String?
  createdAt         DateTime @default(now())

  teacher Teacher @relation(fields: [teacherId], references: [id])

  @@index([teacherId, predictionDate(sort: Desc)])
  @@map("wellness_predictions")
}

// Note: Views like teacher_current_workload and department_workload_distribution
// can be created via raw SQL after migration, as Prisma doesn't support views directly in schema.
// Example raw SQL for views would go in a migration file.