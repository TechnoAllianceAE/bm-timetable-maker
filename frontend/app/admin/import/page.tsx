'use client';

import { useState } from 'react';
import AdminLayout from '@/components/AdminLayout';
import axios from 'axios';

interface ImportStatus {
  file: string;
  status: 'pending' | 'uploading' | 'success' | 'error';
  message?: string;
  recordsImported?: number;
}

export default function ImportPage() {
  const [files, setFiles] = useState<{
    classes?: File;
    teachers?: File;
    subjects?: File;
    rooms?: File;
  }>({});

  const [importStatus, setImportStatus] = useState<ImportStatus[]>([]);
  const [importing, setImporting] = useState(false);

  const handleFileChange = (type: 'classes' | 'teachers' | 'subjects' | 'rooms', file: File | null) => {
    if (file) {
      setFiles(prev => ({ ...prev, [type]: file }));
    } else {
      setFiles(prev => {
        const newFiles = { ...prev };
        delete newFiles[type];
        return newFiles;
      });
    }
  };

  const handleImport = async () => {
    if (Object.keys(files).length === 0) {
      alert('Please select at least one CSV file to import');
      return;
    }

    setImporting(true);
    const statuses: ImportStatus[] = [];

    try {
      const token = localStorage.getItem('token');
      const API_BASE = '/api/v1'; // Use Next.js proxy

      // Import in order: subjects, rooms, teachers, classes
      const importOrder: Array<keyof typeof files> = ['subjects', 'rooms', 'teachers', 'classes'];

      for (const fileType of importOrder) {
        const file = files[fileType];
        if (!file) continue;

        const status: ImportStatus = {
          file: file.name,
          status: 'uploading',
        };
        statuses.push(status);
        setImportStatus([...statuses]);

        try {
          const formData = new FormData();
          formData.append('file', file);

          const response = await axios.post(
            `${API_BASE}/import/${fileType}`,
            formData,
            {
              headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'multipart/form-data',
              },
            }
          );

          status.status = 'success';
          status.message = response.data.message;
          status.recordsImported = response.data.recordsImported;
        } catch (error: any) {
          status.status = 'error';
          status.message = error.response?.data?.message || error.message || 'Import failed';
        }

        setImportStatus([...statuses]);
      }
    } catch (error) {
      console.error('Import error:', error);
    } finally {
      setImporting(false);
    }
  };

  const handleClear = () => {
    setFiles({});
    setImportStatus([]);
  };

  return (
    <AdminLayout>
      <div className="max-w-4xl mx-auto space-y-6">
        <div>
          <h1 className="text-2xl font-semibold text-gray-900">Import School Data</h1>
          <p className="mt-1 text-sm text-gray-600">
            Import classes, teachers, subjects, and rooms from CSV files generated by tt_tester
          </p>
        </div>

        <div className="bg-white shadow rounded-lg p-6">
          <h2 className="text-lg font-medium text-gray-900 mb-4">CSV File Format</h2>
          <div className="bg-blue-50 border border-blue-200 rounded-md p-4 mb-6">
            <p className="text-sm text-blue-800">
              <strong>Compatible with tt_tester data generator output</strong>
            </p>
            <p className="text-xs text-blue-700 mt-2">
              Use: <code className="bg-blue-100 px-1 py-0.5 rounded">python3 data_generator.py --config small --prefix school_data</code>
            </p>
          </div>

          <div className="space-y-4">
            {/* Classes CSV */}
            <div className="border border-gray-200 rounded-lg p-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Classes CSV
                <span className="ml-2 text-xs text-gray-500">(class_id, name, grade, section, capacity)</span>
              </label>
              <input
                type="file"
                accept=".csv"
                onChange={(e) => handleFileChange('classes', e.target.files?.[0] || null)}
                className="block w-full text-sm text-gray-500
                  file:mr-4 file:py-2 file:px-4
                  file:rounded-md file:border-0
                  file:text-sm file:font-semibold
                  file:bg-blue-50 file:text-blue-700
                  hover:file:bg-blue-100"
              />
              {files.classes && (
                <p className="mt-1 text-xs text-green-600">✓ {files.classes.name}</p>
              )}
            </div>

            {/* Teachers CSV */}
            <div className="border border-gray-200 rounded-lg p-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Teachers CSV
                <span className="ml-2 text-xs text-gray-500">(teacher_id, name, email, phone, max_periods_per_day, max_periods_per_week, subjects_qualified)</span>
              </label>
              <input
                type="file"
                accept=".csv"
                onChange={(e) => handleFileChange('teachers', e.target.files?.[0] || null)}
                className="block w-full text-sm text-gray-500
                  file:mr-4 file:py-2 file:px-4
                  file:rounded-md file:border-0
                  file:text-sm file:font-semibold
                  file:bg-blue-50 file:text-blue-700
                  hover:file:bg-blue-100"
              />
              {files.teachers && (
                <p className="mt-1 text-xs text-green-600">✓ {files.teachers.name}</p>
              )}
            </div>

            {/* Subjects CSV */}
            <div className="border border-gray-200 rounded-lg p-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Subjects CSV
                <span className="ml-2 text-xs text-gray-500">(code, name, needs_lab, periods_per_week)</span>
              </label>
              <input
                type="file"
                accept=".csv"
                onChange={(e) => handleFileChange('subjects', e.target.files?.[0] || null)}
                className="block w-full text-sm text-gray-500
                  file:mr-4 file:py-2 file:px-4
                  file:rounded-md file:border-0
                  file:text-sm file:font-semibold
                  file:bg-blue-50 file:text-blue-700
                  hover:file:bg-blue-100"
              />
              {files.subjects && (
                <p className="mt-1 text-xs text-green-600">✓ {files.subjects.name}</p>
              )}
            </div>

            {/* Rooms CSV */}
            <div className="border border-gray-200 rounded-lg p-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Rooms CSV
                <span className="ml-2 text-xs text-gray-500">(room_id, name, type, capacity, has_projector, specialization)</span>
              </label>
              <input
                type="file"
                accept=".csv"
                onChange={(e) => handleFileChange('rooms', e.target.files?.[0] || null)}
                className="block w-full text-sm text-gray-500
                  file:mr-4 file:py-2 file:px-4
                  file:rounded-md file:border-0
                  file:text-sm file:font-semibold
                  file:bg-blue-50 file:text-blue-700
                  hover:file:bg-blue-100"
              />
              {files.rooms && (
                <p className="mt-1 text-xs text-green-600">✓ {files.rooms.name}</p>
              )}
            </div>
          </div>

          <div className="mt-6 flex gap-3">
            <button
              onClick={handleImport}
              disabled={importing || Object.keys(files).length === 0}
              className={`px-6 py-2 rounded-md text-white font-medium ${
                importing || Object.keys(files).length === 0
                  ? 'bg-gray-400 cursor-not-allowed'
                  : 'bg-blue-600 hover:bg-blue-700'
              }`}
            >
              {importing ? 'Importing...' : 'Import Data'}
            </button>
            <button
              onClick={handleClear}
              disabled={importing}
              className="px-6 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
            >
              Clear
            </button>
          </div>
        </div>

        {/* Import Status */}
        {importStatus.length > 0 && (
          <div className="bg-white shadow rounded-lg p-6">
            <h2 className="text-lg font-medium text-gray-900 mb-4">Import Status</h2>
            <div className="space-y-3">
              {importStatus.map((status, index) => (
                <div
                  key={index}
                  className={`p-4 rounded-md border ${
                    status.status === 'success'
                      ? 'bg-green-50 border-green-200'
                      : status.status === 'error'
                      ? 'bg-red-50 border-red-200'
                      : status.status === 'uploading'
                      ? 'bg-blue-50 border-blue-200'
                      : 'bg-gray-50 border-gray-200'
                  }`}
                >
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-900">{status.file}</p>
                      {status.message && (
                        <p className="text-xs text-gray-600 mt-1">{status.message}</p>
                      )}
                      {status.recordsImported !== undefined && (
                        <p className="text-xs text-gray-600 mt-1">
                          {status.recordsImported} records imported
                        </p>
                      )}
                    </div>
                    <div>
                      {status.status === 'success' && (
                        <span className="text-green-600">✓</span>
                      )}
                      {status.status === 'error' && (
                        <span className="text-red-600">✗</span>
                      )}
                      {status.status === 'uploading' && (
                        <span className="text-blue-600">⟳</span>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
}
