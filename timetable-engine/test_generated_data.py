"""
Test: Generated Data Verification

Verifies both teacher consistency and home room usage
using CSV data generated by the tt_tester data_generator.

Usage:
    python3 test_generated_data.py TT_20251007_123010_83ced0da
"""

import sys
import csv
from pathlib import Path
from collections import defaultdict

# Add src directory to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from models_phase1_v25 import (
    Class, Subject, Teacher, TimeSlot, Room,
    RoomType, DayOfWeek
)
from csp_solver_complete_v25 import CSPSolverCompleteV25


def load_csv_data(tt_id: str):
    """Load test data from CSV files generated by data_generator"""

    # Construct paths to CSV files
    data_dir = Path(__file__).parent.parent / "tt_tester"

    classes = []
    subjects = []
    teachers = []
    rooms = []
    time_slots = []

    # Load classes
    classes_file = data_dir / f"data_classes_{tt_id}.csv"
    if classes_file.exists():
        with open(classes_file, 'r') as f:
            reader = csv.DictReader(f)
            for row in reader:
                classes.append(Class(
                    id=row['class_id'],
                    school_id=row.get('school_id', 'SCH_001'),
                    name=row.get('name', row.get('class_name', f"Class {row['class_id']}")),
                    grade=int(row['grade']),
                    section=row.get('section', 'A'),
                    student_count=int(row.get('capacity', row.get('student_count', 30)))
                ))

    # Load subjects
    subjects_file = data_dir / f"data_subjects_{tt_id}.csv"
    if subjects_file.exists():
        with open(subjects_file, 'r') as f:
            reader = csv.DictReader(f)
            for row in reader:
                subjects.append(Subject(
                    id=row['code'],
                    school_id=row.get('school_id', 'SCH_001'),
                    name=row['name'],
                    code=row['code'],
                    grade_level=int(row.get('grade_level', 10)),
                    periods_per_week=int(row['periods_per_week']),
                    prefer_morning=row.get('prefer_morning', 'false').lower() == 'true',
                    requires_lab=row.get('needs_lab', row.get('requires_lab', 'false')).lower() == 'true'
                ))

    # Load teachers
    teachers_file = data_dir / f"data_teachers_{tt_id}.csv"
    if teachers_file.exists():
        with open(teachers_file, 'r') as f:
            reader = csv.DictReader(f)
            for row in reader:
                # Parse subjects (comma-separated)
                subject_field = row.get('subjects_qualified', row.get('subjects', ''))
                teacher_subjects = [s.strip() for s in subject_field.split(',') if s.strip()]

                teachers.append(Teacher(
                    id=row['teacher_id'],
                    user_id=row.get('user_id', row['teacher_id']),
                    name=row['name'],
                    email=row.get('email', f"{row['teacher_id']}@school.com"),
                    subjects=teacher_subjects,
                    max_periods_per_day=int(row.get('max_periods_per_day', 8)),
                    max_periods_per_week=int(row.get('max_periods_per_week', 40)),
                    max_consecutive_periods=int(row.get('max_consecutive_periods', 3))
                ))

    # Load rooms
    rooms_file = data_dir / f"data_rooms_{tt_id}.csv"
    if rooms_file.exists():
        with open(rooms_file, 'r') as f:
            reader = csv.DictReader(f)
            for row in reader:
                room_type_str = row.get('type', 'classroom').upper()
                if room_type_str == 'CLASSROOM':
                    room_type = RoomType.CLASSROOM
                elif room_type_str == 'LAB':
                    room_type = RoomType.LAB
                elif room_type_str == 'SPORTS':
                    room_type = RoomType.SPORTS
                else:
                    room_type = RoomType.CLASSROOM

                rooms.append(Room(
                    id=row['room_id'],
                    school_id=row.get('school_id', 'SCH_001'),
                    name=row['name'],
                    type=room_type,
                    capacity=int(row.get('capacity', 30))
                ))

    # Load time slots (or generate if not present)
    slots_file = data_dir / f"data_time_slots_{tt_id}.csv"
    if slots_file.exists():
        with open(slots_file, 'r') as f:
            reader = csv.DictReader(f)
            for row in reader:
                is_break = row.get('is_break', 'false').lower() == 'true'
                if not is_break:  # Skip break periods
                    time_slots.append(TimeSlot(
                        id=row['slot_id'],
                        school_id=row.get('school_id', 'SCH_001'),
                        day_of_week=row['day_of_week'].upper(),
                        period_number=int(row['period_number']),
                        start_time=row['start_time'],
                        end_time=row['end_time'],
                        is_break=is_break
                    ))
    else:
        # Generate default time slots: 5 days √ó 7 periods = 35 slots
        days = ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY"]
        for day in days:
            for period in range(1, 8):  # 7 periods per day
                time_slots.append(TimeSlot(
                    id=f"{day}_P{period}",
                    school_id="SCH_001",
                    day_of_week=day,
                    period_number=period,
                    start_time=f"{8 + period}:00",
                    end_time=f"{8 + period}:45",
                    is_break=False
                ))

    return classes, subjects, teachers, time_slots, rooms


def test_generated_data(tt_id: str):
    """
    Test timetable generation with CSV data and verify:
    1. Teacher consistency (one teacher per subject per class)
    2. Home room usage (classes prefer their home room)
    """

    print("\n" + "="*80)
    print(f"TEST: Generated Data Verification (TT ID: {tt_id})")
    print("="*80)

    # Load data
    print("\nüìÇ Loading CSV data...")
    classes, subjects, teachers, time_slots, rooms = load_csv_data(tt_id)

    print(f"  Classes: {len(classes)}")
    print(f"  Subjects: {len(subjects)}")
    print(f"  Teachers: {len(teachers)}")
    print(f"  Time Slots: {len(time_slots)}")
    print(f"  Rooms: {len(rooms)}")

    if not classes or not subjects or not teachers or not time_slots or not rooms:
        print("\n‚ùå FAILED: Could not load data from CSV files")
        print(f"   Make sure files exist in ../tt_tester/ with TT ID: {tt_id}")
        return False

    # Initialize solver
    solver = CSPSolverCompleteV25(debug=False)

    # Generate timetable
    print("\n" + "-"*80)
    print("üöÄ Generating timetable...")
    print("-"*80)

    timetables, gen_time, conflicts, suggestions = solver.solve(
        classes=classes,
        subjects=subjects,
        teachers=teachers,
        time_slots=time_slots,
        rooms=rooms,
        constraints=[],
        num_solutions=1,
        enforce_teacher_consistency=True
    )

    if not timetables:
        print("\n‚ùå FAILED: Could not generate timetable")
        if conflicts:
            print(f"Conflicts: {conflicts}")
        if suggestions:
            print(f"Suggestions: {suggestions}")
        return False

    timetable = timetables[0]

    print(f"\n‚úÖ Generated timetable with {len(timetable.entries)} entries in {gen_time:.2f}s")

    # =================================================================
    # VERIFICATION 1: Teacher Consistency
    # =================================================================
    print("\n" + "="*80)
    print("VERIFICATION 1: Teacher Consistency")
    print("="*80)

    # Track teachers per (class, subject) pair
    class_subject_teachers = defaultdict(set)

    for entry in timetable.entries:
        key = (entry.class_id, entry.subject_id)
        class_subject_teachers[key].add(entry.teacher_id)

    # Count violations
    violations = 0
    consistent_pairs = 0

    for key, teachers_set in class_subject_teachers.items():
        class_id, subject_id = key
        class_name = next((c.name for c in classes if c.id == class_id), class_id)
        subject_name = next((s.name for s in subjects if s.id == subject_id), subject_id)

        if len(teachers_set) > 1:
            violations += 1
            print(f"  ‚ùå {class_name} - {subject_name}: {len(teachers_set)} teachers")
        else:
            consistent_pairs += 1

    total_pairs = len(class_subject_teachers)
    consistency_rate = (consistent_pairs / total_pairs * 100) if total_pairs > 0 else 0

    print(f"\nüìä Teacher Consistency Summary:")
    print(f"  Total (class, subject) pairs: {total_pairs}")
    print(f"  Consistent pairs: {consistent_pairs}/{total_pairs} ({consistency_rate:.1f}%)")
    print(f"  Violations: {violations}")

    teacher_check_passed = violations == 0

    if teacher_check_passed:
        print(f"  ‚úÖ PASSED: 100% teacher consistency")
    else:
        print(f"  ‚ö†Ô∏è  WARNING: {violations} violations found")

    # =================================================================
    # VERIFICATION 2: Home Room Usage
    # =================================================================
    print("\n" + "="*80)
    print("VERIFICATION 2: Home Room Usage")
    print("="*80)

    home_room_check_passed = True

    for class_obj in classes:
        # Get all entries for this class
        class_entries = [e for e in timetable.entries if e.class_id == class_obj.id]

        # Separate regular and lab entries
        regular_entries = []
        lab_entries = []

        for entry in class_entries:
            subject = next((s for s in subjects if s.id == entry.subject_id), None)
            if subject:
                if subject.requires_lab:
                    lab_entries.append(entry)
                else:
                    regular_entries.append(entry)

        # Get home room (most frequently used room for regular subjects)
        if regular_entries:
            room_counts = {}
            for entry in regular_entries:
                room_counts[entry.room_id] = room_counts.get(entry.room_id, 0) + 1

            home_room_id = max(room_counts, key=room_counts.get)
            home_room_name = next((r.name for r in rooms if r.id == home_room_id), home_room_id)

            home_room_usage = room_counts[home_room_id]
            total_regular = len(regular_entries)
            usage_percentage = (home_room_usage / total_regular) * 100 if total_regular > 0 else 0

            print(f"\n  {class_obj.name}:")
            print(f"    Home Room: {home_room_name}")
            print(f"    Regular Periods: {total_regular}")
            print(f"    Home Room Usage: {home_room_usage}/{total_regular} ({usage_percentage:.1f}%)")

            # Check if usage is high enough (>50% expected for medium/large datasets)
            if usage_percentage >= 70:
                print(f"    ‚úÖ Excellent usage (‚â•70%)")
            elif usage_percentage >= 50:
                print(f"    ‚úÖ Good usage (‚â•50%)")
            elif usage_percentage >= 30:
                print(f"    ‚ö†Ô∏è  Moderate usage (‚â•30%)")
            else:
                print(f"    ‚ùå Low usage (<30%)")
                home_room_check_passed = False

        # Check lab usage
        if lab_entries:
            lab_room_count = sum(1 for e in lab_entries
                                 if any(r.id == e.room_id and r.type == RoomType.LAB for r in rooms))
            total_lab = len(lab_entries)
            lab_percentage = (lab_room_count / total_lab) * 100 if total_lab > 0 else 0

            print(f"    Lab Periods: {total_lab}")
            print(f"    Using Lab Rooms: {lab_room_count}/{total_lab} ({lab_percentage:.1f}%)")

    # =================================================================
    # FINAL RESULT
    # =================================================================
    print("\n" + "="*80)
    print("FINAL RESULT")
    print("="*80)

    if teacher_check_passed and home_room_check_passed:
        print("‚úÖ ALL TESTS PASSED")
        print("   ‚úì Teacher consistency: 100%")
        print("   ‚úì Home room usage: Acceptable")
    elif teacher_check_passed:
        print("‚ö†Ô∏è  PARTIAL PASS")
        print("   ‚úì Teacher consistency: 100%")
        print("   ‚ö†Ô∏è  Home room usage: Below expectations")
    else:
        print("‚ùå TESTS FAILED")
        if not teacher_check_passed:
            print(f"   ‚úó Teacher consistency: {violations} violations")
        if not home_room_check_passed:
            print("   ‚úó Home room usage: Below expectations")

    print("="*80 + "\n")

    return teacher_check_passed and home_room_check_passed


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python3 test_generated_data.py <TT_ID>")
        print("Example: python3 test_generated_data.py TT_20251007_123010_83ced0da")
        sys.exit(1)

    tt_id = sys.argv[1]
    passed = test_generated_data(tt_id)
    sys.exit(0 if passed else 1)
