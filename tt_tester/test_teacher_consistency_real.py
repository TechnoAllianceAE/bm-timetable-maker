#!/usr/bin/env python3
"""
Test teacher consistency with real school data generated by data_generator.py

Usage:
    python3 test_teacher_consistency_real.py TT_20251007_115932_9e4eb784
"""

import sys
import csv
import json
import requests
from collections import defaultdict
from pathlib import Path

def load_data(tt_id):
    """Load generated test data"""

    # Load metadata
    metadata_file = f"metadata_{tt_id}.json"
    if not Path(metadata_file).exists():
        print(f"❌ Metadata file not found: {metadata_file}")
        return None

    with open(metadata_file) as f:
        metadata = json.load(f)

    # Load CSVs
    data = {
        "classes": [],
        "teachers": [],
        "subjects": [],
        "rooms": [],
        "assignments": []
    }

    for data_type in data.keys():
        csv_file = f"data_{data_type}_{tt_id}.csv"
        if Path(csv_file).exists():
            with open(csv_file) as f:
                reader = csv.DictReader(f)
                data[data_type] = list(reader)

    return data, metadata

def prepare_timetable_request(data, metadata):
    """Prepare request for timetable service"""

    # Convert classes
    classes = []
    for cls_data in data["classes"]:
        classes.append({
            "id": cls_data["class_id"],
            "school_id": "SCH_001",
            "name": cls_data["name"],
            "grade": int(cls_data["grade"]),
            "section": cls_data["section"],
            "student_count": int(cls_data.get("capacity", cls_data.get("student_count", 30)))
        })

    # Convert subjects
    subjects = []
    subject_map = {}
    for subj_data in data["subjects"]:
        subject_id = subj_data.get("subject_id", subj_data.get("code"))
        subj = {
            "id": subject_id,
            "school_id": "SCH_001",
            "name": subj_data["name"],
            "code": subj_data["code"],
            "grade_level": 10,
            "periods_per_week": int(subj_data["periods_per_week"]),
            "prefer_morning": subj_data.get("prefer_morning", "").lower() == "true",
            "requires_lab": subj_data.get("needs_lab", subj_data.get("requires_lab", "")).lower() == "true"
        }
        subjects.append(subj)
        subject_map[subject_id] = subj_data["name"]

    # Convert teachers with their qualified subjects
    teachers = []
    teacher_subjects = defaultdict(set)

    # Build teacher-subject mapping from assignments
    for assign in data["assignments"]:
        teacher_id = assign["teacher_id"]
        subject_code = assign.get("subject_code", assign.get("subject_id"))
        teacher_subjects[teacher_id].add(subject_map.get(subject_code, subject_code))

    for teacher_data in data["teachers"]:
        teacher_id = teacher_data["teacher_id"]

        # Try to get from assignments first, then from teacher data
        qualified_subjects = list(teacher_subjects.get(teacher_id, []))
        if not qualified_subjects and "subjects_qualified" in teacher_data:
            qualified_subjects = [s.strip() for s in teacher_data["subjects_qualified"].split(",")]

        teachers.append({
            "id": teacher_id,
            "user_id": f"USER_{teacher_id}",
            "name": teacher_data["name"],
            "email": teacher_data.get("email", f"{teacher_id}@school.com"),
            "subjects": qualified_subjects,
            "max_periods_per_day": int(teacher_data.get("max_periods_per_day", 8)),
            "max_periods_per_week": int(teacher_data.get("max_periods_per_week", 35)),
            "max_consecutive_periods": int(teacher_data.get("max_consecutive_periods", 3))
        })

    # Convert rooms
    rooms = []
    for room_data in data["rooms"]:
        room_type = room_data.get("type", "classroom").upper()
        if room_type not in ["CLASSROOM", "LAB", "SPORTS", "LIBRARY", "AUDITORIUM"]:
            room_type = "CLASSROOM"
        rooms.append({
            "id": room_data["room_id"],
            "school_id": "SCH_001",
            "name": room_data["name"],
            "type": room_type,
            "capacity": int(room_data.get("capacity", 40))
        })

    # Generate time slots
    time_slots = []
    days = ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY"]
    for day_idx, day in enumerate(days):
        for period in range(1, 9):  # 8 periods per day
            time_slots.append({
                "id": f"{day}_P{period}",
                "school_id": "SCH_001",
                "day_of_week": day,
                "period_number": period,
                "start_time": f"{8 + period}:00",
                "end_time": f"{8 + period}:45",
                "is_break": False
            })

    return {
        "school_id": "SCH_001",
        "academic_year_id": "2024-2025",
        "classes": classes,
        "subjects": subjects,
        "teachers": teachers,
        "time_slots": time_slots,
        "rooms": rooms,
        "constraints": []
    }

def verify_teacher_consistency(timetable_data):
    """Verify that each class-subject pair has only one teacher"""

    entries = timetable_data.get("entries", [])

    # Group by (class_id, subject_id)
    class_subject_teachers = defaultdict(set)

    for entry in entries:
        key = (entry["class_id"], entry["subject_id"])
        class_subject_teachers[key].add(entry["teacher_id"])

    # Check for violations
    violations = []
    for (class_id, subject_id), teachers in class_subject_teachers.items():
        if len(teachers) > 1:
            violations.append({
                "class_id": class_id,
                "subject_id": subject_id,
                "teacher_count": len(teachers),
                "teachers": list(teachers)
            })

    return violations

def main():
    if len(sys.argv) < 2:
        print("Usage: python3 test_teacher_consistency_real.py TT_ID")
        print("Example: python3 test_teacher_consistency_real.py TT_20251007_115932_9e4eb784")
        sys.exit(1)

    tt_id = sys.argv[1]

    print("="*80)
    print(f"Testing Teacher Consistency with Real Data: {tt_id}")
    print("="*80)

    # Load data
    print("\n📂 Loading test data...")
    result = load_data(tt_id)
    if not result:
        sys.exit(1)

    data, metadata = result

    print(f"✓ Loaded data:")
    print(f"  Classes: {len(data['classes'])}")
    print(f"  Teachers: {len(data['teachers'])}")
    print(f"  Subjects: {len(data['subjects'])}")
    print(f"  Rooms: {len(data['rooms'])}")
    print(f"  Assignments: {len(data['assignments'])}")

    # Prepare request
    print("\n🔧 Preparing timetable request...")
    request_data = prepare_timetable_request(data, metadata)

    # Call timetable service
    print("\n🚀 Generating timetable with enforce_teacher_consistency=True...")

    url = "http://localhost:8000/generate"
    response = requests.post(url, json=request_data, timeout=300)

    if response.status_code != 200:
        print(f"❌ Request failed: {response.status_code}")
        print(response.text)
        sys.exit(1)

    result = response.json()

    print(f"✓ Generation complete")
    print(f"  Status: {result.get('status')}")
    print(f"  Generation time: {result.get('generation_time', 0):.2f}s")
    print(f"  Entries: {len(result.get('timetable', {}).get('entries', []))}")

    # Verify teacher consistency
    print("\n" + "="*80)
    print("🔍 Verifying Teacher Consistency")
    print("="*80)

    violations = verify_teacher_consistency(result.get('timetable', {}))

    if not violations:
        print("\n✅ SUCCESS: All class-subject pairs have ONE teacher!")
        print(f"   Verified {len(result.get('timetable', {}).get('entries', []))} entries")
        print(f"   Zero violations found")
        return 0
    else:
        print(f"\n❌ FAILURE: Found {len(violations)} violations")
        print("\nViolation Details:")

        # Load subject names for better reporting
        subject_names = {s["subject_id"]: s["name"] for s in data["subjects"]}
        class_names = {c["class_id"]: c["name"] for c in data["classes"]}
        teacher_names = {t["teacher_id"]: t["name"] for t in data["teachers"]}

        for i, violation in enumerate(violations[:10], 1):  # Show first 10
            class_name = class_names.get(violation["class_id"], violation["class_id"])
            # Handle both subject_id and subject_code
            subj_id = violation["subject_id"]
            subject_name = subject_names.get(subj_id, subj_id)
            teacher_list = [teacher_names.get(tid, tid) for tid in violation["teachers"]]

            print(f"\n  {i}. {class_name} - {subject_name}:")
            print(f"     Teachers: {', '.join(teacher_list)} ({violation['teacher_count']} teachers)")

        if len(violations) > 10:
            print(f"\n  ... and {len(violations) - 10} more violations")

        return 1

if __name__ == "__main__":
    sys.exit(main())
